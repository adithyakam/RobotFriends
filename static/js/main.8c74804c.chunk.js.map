{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","CounterButton","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundry","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8c74804c.chunk.js","sourcesContent":["import { apiCall } from './api/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())\n  ","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React from 'react';\n \nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('CardList');\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  console.log('SearchBox');\n  return (\n    <div className='pa2'>\n      <input\n        aria-label=\"Search\"\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  console.log('Scroll');\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    console.log('ErrorBoundary');\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React, {Component} from 'react';\n\nclass CounterButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: 1};\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    console.log('counter');\n    return (\n      <button\n        color={this.props.color}\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton","import React, {Component} from 'react';\nimport CounterButton from './CounterButton';\n\n// In most cases, instead of writing shouldComponentUpdate()\n// by hand, you can inherit from React.PureComponent. It is\n// equivalent to implementing shouldComponentUpdate() with a\n// shallow comparison of current and previous props and state.\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false\n  }\n  render() {\n    console.log('header')\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton />\n      </div>\n    );\n  }\n};\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\n\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => requestRobots(dispatch)\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      count: 1\n    }\n  }\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n        <Header count={this.state.count}/>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll className='tc'>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n} \n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { requestRobots, searchRobots } from './reducers'\n\nimport './index.css'; \n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.register();\n\n\n"],"sourceRoot":""}