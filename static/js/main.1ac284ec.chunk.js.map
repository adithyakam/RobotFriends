{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","console","log","state","_this2","fetch","then","response","json","users","_this$state","filterRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAgBeA,EAdJ,SAAAC,GAAmB,IAAjBC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAGxB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,GAAEC,IAAG,wBAAAC,OAA0BP,EAA1B,cADlB,IAEAC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCWOS,EAlBA,SAAAX,GAAc,IAAXY,EAAWZ,EAAXY,OAClB,OACIR,EAAAC,EAAAC,cAAA,WAEAM,EAAOC,IAAI,SAACC,EAAKC,GACjB,OACAX,EAAAC,EAAAC,cAACU,EAAD,CACIC,IAAKF,EACLZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCFVgB,EATF,SAACC,GACV,OACIf,EAAAC,EAAAC,cAAA,OAAKc,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC3DJ,EAAMK,WCSJC,EAZG,SAAAzB,GAAoB,IAAlB0B,EAAkB1B,EAAlB0B,aACpB,OACItB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVoB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCwCHI,qBAvCf,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaJI,eAAe,SAACC,GACZR,EAAKS,SAAS,CAACC,YAAYF,EAAMG,OAAOC,QACxCC,QAAQC,IAAIN,EAAMG,OAAOC,QAdzBZ,EAAKe,MAAM,CACPlC,OAAO,GACP6B,YAAY,IAJPV,mFAQM,IAAAgB,EAAAb,KACfc,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKP,SAAS,CAAC5B,OAAOwC,uCAS7B,IAAAC,EAC4BnB,KAAKY,MAA7BlC,EADJyC,EACIzC,OAAQ6B,EADZY,EACYZ,YACVa,EAAa1C,EAAO2C,OAAO,SAAAC,GAC7B,OAAOA,EAAMvD,KAAKwD,cAAcC,SAASjB,EAAYgB,iBAEzD,OAAS7C,EAAO+C,OAGfvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,gBACCH,EAAAC,EAAAC,cAACsD,EAAD,CAAWlC,aAAcQ,KAAKI,iBAC/BlC,EAAAC,EAAAC,cAACuD,EAAD,KACKzD,EAAAC,EAAAC,cAACwD,EAAD,CAAUlD,OAAQ0C,MANtBlD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,iBA5BMwD,cCICC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAQlE,EAAAC,EAAAC,cAAEiE,EAAF,MACXC,SAASC,eAAe,SDyHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.1ac284ec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({name,email,id})=>{\r\n  \r\n\r\nreturn(\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5  '>\r\n        <img alt=''src={`https://robohash.org/${id}?200x200`} />>\r\n    <div>\r\n    <h2>{name}</h2>\r\n    <p>{email}</p>\r\n    </div>\r\n    </div>\r\n);\r\n\r\n} \r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({ robots })=>{\r\nreturn(\r\n    <div>\r\n    {\r\n    robots.map((user,i) => {\r\n    return (\r\n    <Card \r\n        key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email }\r\n        />\r\n        );\r\n    })\r\n    }\r\n    </div>\r\n    );\r\n} \r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n    return(\r\n        <div style={{overflowY:'scroll',border:'1px solid black',height:'800px'}}>\r\n            {props.children}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\nreturn(\r\n    <div className='pa2'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='search Robots'\r\n        onChange={searchChange}\r\n        />\r\n    </div>\r\n);\r\n}\r\nexport default SearchBox;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from '../components/SearchBox';\r\nimport '../App.css';\r\n\r\n\r\n\r\nclass  App extends Component{\r\n\r\nconstructor(){\r\n    super()\r\n    this.state={\r\n        robots:[],\r\n        searchfield:''\r\n    }\r\n}\r\n\r\ncomponentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({robots:users}));\r\n}\r\n\r\nonSearchChange=(event)=>{\r\n    this.setState({searchfield:event.target.value})\r\n    console.log(event.target.value);\r\n\r\n}\r\n\r\n    render(){\r\n        const { robots ,searchfield } = this.state;\r\n        const filterRobots=robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return  !robots.length ?\r\n             <h1 className='tc'>Loding</h1>:\r\n       (\r\n         <div className='tc'>\r\n            <h1 className='f2'>RobotFriends</h1>\r\n             <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n                 <CardList robots={filterRobots}/>\r\n            </Scroll>\r\n        </div>\r\n         );\r\n        \r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render( < App />\n    , document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}